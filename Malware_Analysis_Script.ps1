# Developed by sysadmins-admin
# Function Purpose: Enumerate important keys
# All names of companies/trademarks referenced herein are owned by their respective companies with all rights and privileges owned by them.

function baseline_keys (){
  # This command creates the drive to enumerate the $keys array.
     New-PSDrive HKU1 Registry HKEY_USERS -ErrorAction SilentlyContinue # Created new drive because my device would not read HKU

<# Initializing "Keys" values locally to reduce scope and increase security and reduce running memory vulnerabilities. 
   This is an added benefit.#>

    $hklm_current_run = "HKLM:\software\Microsoft\Windows\CurrentVersion\Run" # found C:\malware.exe written by Kaspersky
    $hklm_current_runonce = "HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce" # found C:\virus.exe written by McAfee
    $hkcu_current_run = "HKU1:\Software\Microsoft\Windows\CurrentVersion\Run" # found C:\botnet.exe written by Symantec
    $hkcu_current_runonce = "HKU1:\Software\Microsoft\Windows\CurrentVersion\RunOnce" # found C:\worm.exe written by Norton
    $hklm_current_tasks = "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Schedule\Taskcache\Tasks" # Nothing found 
    $hklm_current_contr_servc = "HKLM:\SYSTEM\CurrentControlSet\SERVICES\" # Nothing Found
    $hklm_current_contr_usbstor = "HKLM:\SYSTEM\CurrentControlSet\Enum\USB" # Nothing found
    $hklm_current_netlist_profiles = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Profiles\" # Found Terror_cafe_network
    $hklm_current_profile_list = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\" # Found unauthorized account named 'Hacker_McHackerson'

# Declaring "Keys" array locally to reduce scope and increase security and reduce running memory vulnerabilities.
$keys = @($hklm_current_run, $hklm_current_runonce, $hkcu_current_run, $hkcu_current_runonce,$hklm_current_tasks, $hklm_current_contr_servc, $hklm_current_contr_usbstor, $hklm_current_netlist_profiles, $hklm_current_profile_list)

#Foreach loop to step through each of the variables in the '$keys' array.
    foreach($key in $keys){
        Get-Item $key -ErrorAction SilentlyContinue | Format-Table
        Get-ChildItem -Recurse $key -ErrorAction SilentlyContinue | Format-Table
        Get-ItemProperty $key -ErrorAction SilentlyContinue | Format-Table
    }
    
    # Array to hold none SID based keys
    # $SIDS will store output from follow-on command as an array.
    $SIDS = Get-childitem "HKU1:\" -name

    # Foreach loop to step through the sids of the keys that request sids
    foreach ($sid in $SIDS){

         Get-ItemProperty "HKU1:\$sid\Software\Microsoft\Windows\CurrentVersion\Run" -ErrorAction SilentlyContinue | Format-Table
         Get-ItemProperty "HKU1:\$sid\Software\Microsoft\Windows\CurrentVersion\Runonce" -ErrorAction SilentlyContinue | Format-Table
        
         Get-Item "HKU1:\$sid\Software\Microsoft\Windows\CurrentVersion\Run" -ErrorAction SilentlyContinue |  Format-Table
         Get-Item "HKU1:\$sid\Software\Microsoft\Windows\CurrentVersion\RunOnce" -ErrorAction SilentlyContinue |  Format-Table
       
         Get-ChildItem -Recurse "HKU1:\$sid\Software\Microsoft\Windows\CurrentVersion\Run" -ErrorAction SilentlyContinue |  Format-Table
         Get-ChildItem -Recurse "HKU1:\$sid\Software\Microsoft\Windows\CurrentVersion\Run" -ErrorAction SilentlyContinue |  Format-Table

    }
}

# Removed 'baseline_keys' call here (line 45) because this function will be ran and written to a file.

# Uncomment function to compare initial baseline with any changes made after test was conducted and second file generated.
 # Function Purpose: This function compares a baselined output to a suspected changed output. Run this function by itself F8.
  function compare_obj(){

   # Compared initial baseline to suspected change in baseline and write the output to a file. 
   Compare-Object -ReferenceObject $(Get-Content "C:\Users\Bob\Documents\initial_baseline.txt") -DifferenceObject $(Get-Content "C:\Users\Bob\Documents\after_baseline.txt") | Format-Table >> "C:\Users\Bob\Documents\compared_files.txt"
      
      # Files did not appear in initial comparison so they are appended to the compared_files.txt file.
      # ** Please Note **
      # A Get-Item is performed prior to the malware removing its changes.
      Get-Item "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" -ErrorAction SilentlyContinue >> "C:\Users\Bob\Documents\compared_files.txt" 
      Get-Item "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce" -ErrorAction SilentlyContinue >> "C:\Users\Bob\Documents\compared_files.txt" 
      Get-ChildItem "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\" -ErrorAction SilentlyContinue >> "C:\Users\Bob\Documents\compared_files.txt"
      Get-ChildItem "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Profiles\" -ErrorAction SilentlyContinue >> "C:\Users\Bob\Documents\compared_files.txt"
      Get-Content C:\Users\Bob\Documents\compared_files.txt | Select-String botnet, worm, malware, virus, hack, terror >> "C:\Users\Bob\Documents\compared_files1.txt"
      #Writing over existing file
      Get-Content C:\Users\Bob\Documents\compared_files1.txt | Select-String "Symant[ec]" , "Norto[n]", "Kaspersky", "McAfee[ :]", "Hacke[r]", "Terro[r]" -ErrorAction SilentlyContinue > "C:\Users\Bob\Documents\compared_files.txt"
      Remove-Item -Force C:\Users\Bob\Documents\compared_files1.txt -ErrorAction SilentlyContinue
  }
  
# Function Purpose: This function assists with the automation of executing the malware, the testing of the malware, and the removal of the malware. 
function write_file(){
    
    # If file exist, deliver payload, then test to see if post test file exists,
    # If post file exists then remove payload.
    # *** Additional, if needed, you can remove all files and extract data back. ***
    if (Test-Path "C:\Users\Bob\Documents\initial_baseline.txt"){
            Start-Process "C:\Users\Bob\Documents\badv2.exe" -Verb RunAs -WindowStyle Hidden -ErrorAction SilentlyContinue # Run executable as administrator
            

            # If file exists, compare output, and remove changes made by payload.
            if (Test-Path "C:\Users\Bob\Documents\after_baseline.txt"){
              
                compare_obj  # Call compare object files function below.
                Start-Process "C:\Users\Bob\Documents\unbadv2.exe" -Verb RunAs -WindowStyle Hidden -ErrorAction SilentlyContinue # Remove changes as administrator, hide CMD, and cover tracks.
               }
       
            # If file does not exist, build it, compare output, and then remove changes made by payload.   
            else
            {
                 baseline_keys >> "C:\Users\Bob\Documents\after_baseline.txt" # Create post baseline
                 compare_obj # Function call to "compare_obj" function below.
                 Start-Process "C:\Users\Bob\Documents\unbadv2.exe" -Verb RunAs -WindowStyle Hidden -ErrorAction SilentlyContinue # Remove changes as administrator, hide CMD, and cover tracks.
                     
                     }
               }
    
   # Large catch-block. If all else fail, follow the sequential steps below.     
   else {

        Write-Host "Entering catch block" # Used for error handling and correction
        Start-Process "C:\Users\Bob\Documents\unbadv2.exe" -Verb RunAs -WindowStyle Hidden -ErrorAction SilentlyContinue # Adding here for safe measures and hide CMD.
        Remove-Item "C:\Users\Bob\Documents\initial_baseline.txt" -ErrorAction SilentlyContinue # Take the first baseline
        baseline_keys >> "C:\Users\Bob\Documents\initial_baseline.txt" # Remove file. This will also delete it and any duplicate instances, and reduce footprint.
        
        Remove-Item "C:\Users\Bob\Documents\after_baseline.txt" -ErrorAction SilentlyContinue # Remove file. This will also delete it and any duplicate instances, and reduce footprint.
        Start-Process "C:\Users\Bob\Documents\badv2.exe" -Verb RunAs -WindowStyle Hidden -ErrorAction SilentlyContinue # Run executable as administrator and run CMD in background.
        baseline_keys >> "C:\Users\Bob\Documents\after_baseline.txt" # Create post baseline
        
        compare_obj # Calling compare_obj function to capture data prior to removal of changes.
        Start-Process "C:\Users\Bob\Documents\unbadv2.exe" -Verb RunAs -WindowStyle Hidden -ErrorAction SilentlyContinue # Remove changes as administrator, hide CMD, and cover tracks. Can exfil data here.
        Write-Host "Exiting catch block" # Used for error handling and correction
        
        }
    }
    # Removed function call here as well. It has been integrated into the menu.

#Function Purpose: The purpose of this menu to to provide a user friendly interface to launch this script.
Function Menu($Message){
    Clear-Host
    Write-Host "=== Main Menu ==="
    Write-Host ""
    Write-Host "1) Start enumeration of system"
    Write-Host "2) Quit"
    Write-Host ""
    Write-Host "$Message"

    # Get input from user.
    switch (Read-Host "Please select an option above ") {
        1 {
            Clear-Host
            Write-Host "Starting Enumeration. This may take a while . . ."
            write_file 2>&1 > $null # Redirecting all error messages and output from this program to null. This is an added security benefit.
            Menu("Enumeration complete... Select 2 to quit.") # Message will display after enumeration is complete.
            } 
        2 {Break}
        default {Menu("Error: You did not choose a valid option.")} # Error handling built into the menu. 
    }
}
Menu # Calling the menu here

# Developed by sysadmins-admin